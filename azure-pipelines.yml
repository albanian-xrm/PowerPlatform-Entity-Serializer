pool:
  vmImage: 'windows-2022'

name: $(SourceBranchName)+1.0.$(Date:yyMM)$(Rev:rrr)

steps:
- script: echo Starting build pipeline!
  displayName: 'Hello from Albanian Xrm'

- powershell: |
    echo "##vso[task.setvariable variable=configuration;isOutput=true]$(IF($env:BRANCH -eq "refs/heads/master"){"Azure Pipelines"}else{"release"})"
    echo "##vso[task.setvariable variable=BuildNumber;isOutput=true]$(($env:BuildNumber).Substring(($env:BuildNumber).LastIndexOf('+')+1))"
  name: MyVars
  env: 
    BRANCH: $(Build.SourceBranch)
    BuildNumber: $(Build.BuildNumber)
  displayName: 'Set Configuration Variable'

- task: DownloadSecureFile@1
  name: SignKey 
  inputs:
    secureFile: 'AlbanianXrm.snk'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Signing Secret'

- task: DownloadSecureFile@1
  name: InternalsVisibleTo 
  inputs:
    secureFile: 'InternalsVisibleTo.cs'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'InternalsVisibleTo Secret'

- powershell: echo "##vso[task.setvariable variable=Path;isOutput=true]$((get-item $env:SECURE_FILE).Directory.FullName)"
  name: secretFolder
  env:
    Secure_File: $(SignKey.secureFilePath) 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Secret folder'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: AlbanianXrm.snk 
    targetFolder: 'PowerPlatform.EntitySerializer'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer SignKey'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: InternalsVisibleTo.cs  
    targetFolder: 'PowerPlatform.EntitySerializer'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer InternalsVisibleTo'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: AlbanianXrm.snk 
    targetFolder: 'PowerPlatform.EntitySerializer.Tests'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer.Tests SignKey'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: '$(Parameters.solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(BuildConfiguration) -p:Version=$(MyVars.BuildNumber)'
  displayName: 'dotnet build $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" '

- script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.26'  
  displayName: 'Install ReportGenerator tool'  

- script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'  
  displayName: 'Create reports'  

- task: PublishCodeCoverageResults@1  
  displayName: 'Publish code coverage'  
  inputs:  
    codeCoverageTool: Cobertura  
    summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml' 

- task: NuGetCommand@2
  inputs:
    command: pack
    packagesToPack: PowerPlatform.EntitySerializer.Sources\PowerPlatform.EntitySerializer.Sources.nuspec
    arguments: -p Version=$(MyVars.BuildNumber) 

- task: CopyFiles@2
  displayName: 'Preparing NuGet packages'
  inputs:
    Contents: '**\AlbanianXrm.PowerPlatform.EntitySerializer*nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\NuGets'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish:  '$(Build.ArtifactStagingDirectory)\NuGets'
    ArtifactName: 'NuGets' 