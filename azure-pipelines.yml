pool:
  vmImage: 'windows-latest'

steps:
- script: echo Starting build pipeline!
  displayName: 'Hello from Albanian Xrm'

- task: UseDotNet@2
  displayName: 'Use .Net 6'
  inputs:
    version: '6.0.x'
    packageType: runtime

- task: DownloadSecureFile@1
  name: SignKey 
  inputs:
    secureFile: 'AlbanianXrm.snk'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Signing Secret'

- task: DownloadSecureFile@1
  name: InternalsVisibleTo 
  inputs:
    secureFile: 'InternalsVisibleTo.cs'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'InternalsVisibleTo Secret'

- powershell: echo "##vso[task.setvariable variable=Path;isOutput=true]$((get-item $env:SECURE_FILE).Directory.FullName)"
  name: secretFolder
  env:
    Secure_File: $(SignKey.secureFilePath) 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Secret folder'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: AlbanianXrm.snk 
    targetFolder: 'PowerPlatform.EntitySerializer'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer SignKey'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: InternalsVisibleTo.cs  
    targetFolder: 'PowerPlatform.EntitySerializer'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer InternalsVisibleTo'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: AlbanianXrm.snk 
    targetFolder: 'PowerPlatform.EntitySerializer.Tests'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer.Tests SignKey'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: '$(Parameters.solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(BuildConfiguration)'
  displayName: 'dotnet build $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" '

- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator tool'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool --version 5.1.26'

- task: DotNetCoreCLI@2
  displayName: 'Create reports'
  inputs:
    command: custom
    custom: reportgenerator
    arguments: '-reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'

- task: PublishCodeCoverageResults@1  
  displayName: 'Publish code coverage'  
  inputs:  
    codeCoverageTool: Cobertura  
    summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml' 

- task: CopyFiles@2
  displayName: 'Preparing NuGet packages'
  inputs:
    Contents: '**\AlbanianXrm.PowerPlatform.EntitySerializer*nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\NuGets'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish:  '$(Build.ArtifactStagingDirectory)\NuGets'
    ArtifactName: 'NuGets' 