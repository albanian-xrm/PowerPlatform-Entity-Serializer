pool:
  vmImage: 'windows-2019'

steps:
- script: echo Starting build pipeline!
  displayName: 'Hello from Albanian Xrm'

- task: UseDotNet@2
  displayName: 'Use .Net 5'
  inputs:
    version: '5.0.x'
    packageType: runtime

- task: UseDotNet@2
  displayName: 'Use .Net Core 3.1'
  inputs:
    version: '3.1.x'
    packageType: runtime

- task: UseDotNet@2
  displayName: 'Use .Net Core 3.0'
  inputs:
    version: '3.0.x'
    packageType: runtime

- task: DownloadSecureFile@1
  name: SignKey 
  inputs:
    secureFile: 'AlbanianXrm.snk'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Signing Secret'

- task: DownloadSecureFile@1
  name: InternalsVisibleTo 
  inputs:
    secureFile: 'InternalsVisibleTo.cs'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'InternalsVisibleTo Secret'

- task: CopyFiles@2
  inputs:
    contents: $(SignKey.secureFilePath) 
    targetFolder: 'PowerPlatform.EntitySerializer'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer SignKey'

- task: CopyFiles@2
  inputs:
    contents: $(InternalsVisibleTo.secureFilePath) 
    targetFolder: 'PowerPlatform.EntitySerializer'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer InternalsVisibleTo'

- task: CopyFiles@2
  inputs:
    contents: $(SignKey.secureFilePath) 
    targetFolder: 'PowerPlatform.EntitySerializer.Tests'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.PowerPlatform.EntitySerializer.Tests SignKey'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: '$(Parameters.solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(BuildConfiguration)'
  displayName: 'dotnet build $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" '

- script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8'  
  displayName: 'Install ReportGenerator tool'  

- script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'  
  displayName: 'Create reports'  

- task: PublishCodeCoverageResults@1  
  displayName: 'Publish code coverage'  
  inputs:  
    codeCoverageTool: Cobertura  
    summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml' 

- task: CopyFiles@2
  displayName: 'Preparing NuGet packages'
  inputs:
    Contents: '**\AlbanianXrm.PowerPlatform.EntitySerializer*nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\NuGets'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish:  '$(Build.ArtifactStagingDirectory)\NuGets'
    ArtifactName: 'NuGets' 